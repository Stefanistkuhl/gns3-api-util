name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  GO_VERSION: "1.24.5"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      # - name: Generate shell completions
      #   run: |
      #     ./scripts/generate-completions.sh

      - name: Build for multiple platforms
        run: |
          set -euo pipefail
          mkdir -p dist

          # Get version from tag (e.g., v1.2.3)
          VERSION=${GITHUB_REF#refs/tags/}

          LDFLAGS="-s -w -X github.com/stefanistkuhl/gns3util/cmd.Version=$VERSION"

          GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/gns3util-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/gns3util-linux-arm64 .

          GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/gns3util-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/gns3util-darwin-arm64 .

          GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/gns3util-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/gns3util-windows-arm64.exe .

      - name: Package non-Windows as tar.gz
        run: |
          set -euo pipefail
          cd dist

          # Linux/macOS archives include README.md, LICENSE, and completions if present
          for file in gns3util-*; do
            case "$file" in
              *windows-*.exe) ;;  # skip Windows .exe here
              *)
                # Try to include extra files; if not available, fall back to just the binary
                tar -czf "${file}.tar.gz" "$file" ../README.md ../LICENSE ../completions/ 2>/dev/null \
                  || tar -czf "${file}.tar.gz" "$file"
                ;;
            esac
          done

      - name: Package Windows as zip (include README and LICENSE)
        run: |
          set -euo pipefail
          cd dist

          # Helper: add file/dir to zip only if it exists
          add_if_exists() {
            local target_zip="$1"; shift
            for path in "$@"; do
              if [ -e "$path" ]; then
                zip -r -q "$target_zip" "$path"
              fi
            done
          }

          # Requires zip; install if missing (on ubuntu-latest it is present, but ensure anyway)
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y zip
          fi

          for exe in gns3util-windows-*.exe; do
            [ -e "$exe" ] || continue
            zipname="${exe%.exe}.zip"
            # Start the zip with the executable at the top-level
            zip -q "$zipname" "$exe"
            # Add README, LICENSE, and completions (if present, paths are relative to repo root)
            add_if_exists "$zipname" ../README.md ../LICENSE ../completions
          done

      - name: Generate checksums
        run: |
          set -e
          cd dist
          shopt -s nullglob
          # Include .tar.gz (non-Windows) and .zip (Windows)
          for file in *.tar.gz *.zip; do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
